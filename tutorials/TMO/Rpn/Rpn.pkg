<?xml version="1.0" encoding="UTF-8"?>
<refentry id="{@id}">
    <refnamediv>
        <refname>User Guide for Rpn</refname>
        <refpurpose></refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <author>
            Jesse R. Mather
            <authorblurb>
                {@link mailto:jrmather@gmail.com jrmather@gmail.com}
            </authorblurb>
        </author>
    </refsynopsisdiv>
    {@toc}
    <refsect1 id="{@id intro}">
        <title>Introduction</title>
        <para>
        A simple RPN caclulator.  Full RPN documentation is not the scope of this tutorial.  For more information, see the {@link http://en.wikipedia.org/wiki/Reverse_Polish_notation RPN} article on wikipedia.
        </para>
    </refsect1>
    
    <refsect1 id="{@id operators}">
        <title>Operators</title>
        
        <refsect2 id="{@id std_operators}">
        <title>Standard</title>
        <para>Mic_Rpn supports all standard operators.  In addition, several extended operators ahave been added.</para>
        
            <table>
                <title>Table 1 - Standard Operators</title>
                <tgroup align='left' colsep='1' rowsep='1'>
                    <thead>
                        <row>
                            <entry>Operator</entry>
                            <entry>Description</entry>
                            <entry>Sample</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>+</entry>
                            <entry>addition</entry>
                            <entry>1 1 + =&gt; 2</entry>
                        </row>
                        <row>
                            <entry>-</entry>
                            <entry>substraction</entry>
                            <entry>2 1 - =&gt; 1</entry>
                        </row>
                        <row>
                            <entry>*</entry>
                            <entry>multiplication</entry>
                            <entry>5 2 * =&gt; 10</entry>
                        </row>
                        <row>
                            <entry>/</entry>
                            <entry>division</entry>
                            <entry>6 2 * =&gt; 3</entry>
                        </row>
                        <row>
                            <entry>%</entry>
                            <entry>modulus, remainder from division</entry>
                            <entry>6 2 * =&gt; 0 ; 7 2 * =&gt; 1</entry>
                        </row>
                        <row>
                            <entry>^ or **</entry>
                            <entry>exponents</entry>
                            <entry>2 8 ^ =&gt; 256</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </refsect2>
        <refsect2 id="{@id ext_operators}">
        <title>Extended</title>
            <refsect3 id="{@id if_ext_operators}">
                <title>IF</title>
                <para>
                    conditional. if first item is true return the second otherwise return the third
                </para>
                <para><example><title>Example:</title><para>1 2 3 IF =&gt; 2</para></example></para>
                <para><example><title>Example:</title><para>0 2 3 IF =&gt; 3</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id min_ext_operators}">
                <title>MIN</title>
                <para>
                    Returns the smaller of two values
                </para>
                <para><example><title>Example:</title><para>2 3 MIN =&gt; 2</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id max_ext_operators}">
                <title>MAX</title>
                <para>
                    Returns the larger of two values
                </para>
                <para><example><title>Example:</title><para>2 3 MAX =&gt; 3</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id lim_ext_operators}">
                <title>LIMIT</title>
                <para>
                    Returns the first element if it is between the second and third, otherwise returns null
                </para>
                <para><example><title>Example:</title><para>2 1 3 LIMIT =&gt; 2</para></example></para>
                <para><example><title>Example:</title><para>2 3 5 LIMIT =&gt; NULL</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id lt_ext_operators}">
                <title>LT or &lt;</title>
                <para>
                    Returns true if the first element is less than the second
                </para>
                <para><example><title>Example:</title><para>1 2 LT =&gt; TRUE</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id le_ext_operators}">
                <title>LE or &lt;</title>
                <para>
                    Returns true if the first element is less than or equal to the second
                </para>
                <para><example><title>Example:</title><para>1 2 LE =&gt; TRUE</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id eq_ext_operators}">
                <title>EQ or ==</title>
                <para>
                    Returns true if the first element is equal to the second
                </para>
                <para><example><title>Example:</title><para>1 2 EQ =&gt; FALSE</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id ge_ext_operators}">
                <title>GE or &gt;=</title>
                <para>
                    Returns true if the first element is greater than or equal to the second
                </para>
                <para><example><title>Example:</title><para>1 2 GE =&gt; FALSE</para></example></para>
            </refsect3>
            
            <refsect3 id="{@id gt_ext_operators}">
                <title>GT or &gt;</title>
                <para>
                    Returns true if the first element is greater than the second
                </para>
                <para><example><title>Example:</title><para>1 2 GT =&gt; FALSE</para></example></para>
            </refsect3>
        </refsect2>
    </refsect1>
        
    <refsect1 id="{@id basic}">
        <title>Basic Usage</title>
        <para></para>
        <programlisting role="php">
&lt;?php
require 'Mic/Rpn.php';

/* perform a simple caclulation */
$result = Mic_Rpn::evaluate('1 1 +');

/* the result is stored in a Mic_Type_Numeric or Mic_Type_Null object */
var_dump($result);

/* print the result as string */
echo $result . "\n";
        </programlisting>
    </refsect1>
    <refsect1 id="{@id sample}">
        <title>Simple Script</title>
        <para>A Simple script that uses this library</para>
        <programlisting role="php">    
#!/opt/webstack/bin/php
&lt;?php
/**
 * RPN caclulator 
 * 
 * Usage: rpn_eval.php &lt;expression&gt;
 */
require 'Mic/Rpn.php';

/* die early if expression is empty */
if ($argc &lt; 2) {
    echo "No expression given\n";
    echo "Usage: " . basename($argv[0]) . " &lt;expression&gt;\n";
    die();
}

/* expression can be comma, space or both delimited */
$expression = preg_replace('/,\s*/', ' ', 
    join(' ',
        array_slice($argv, 1)
    )
);

try { /* attempt to evaluate the expression */
    echo Mic_Rpn::evaluate($expression) . "\n";
} catch (Mic_Rpn_Exception $e) {
    /* Caught an expression error */ 
    echo "Rpn Error: " . $e-&gt;getMessage() . "\n";
} catch (Mic_Type_Stack_Exception $e) {
    /* Caught a lower level stack error */
    echo "Stack Error: " . $e-&gt;getMessage() . "\n";
}
        </programlisting>
    </refsect1>
</refentry>